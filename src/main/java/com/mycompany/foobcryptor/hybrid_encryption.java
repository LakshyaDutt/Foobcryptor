/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.foobcryptor;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author lakshya
 */
public class hybrid_encryption extends javax.swing.JFrame {

    private static final String ALGO = "AES";
    private static final String TRANSFORM = "AES";
    String input,output,publicKey;
    File file;
    
    public static void encrypt_hybrid(String inputFile, String outputFile, String publicKeyFile)  throws Exception{
        
     // Generate random AES key and IV
    KeyGenerator keyGen = KeyGenerator.getInstance("AES");
    keyGen.init(256);
    SecretKey aesKey = keyGen.generateKey();
    byte[] iv = new byte[16];
    SecureRandom random = new SecureRandom();
    random.nextBytes(iv);

    // Encrypt file using AES key and IV
    Cipher aesCipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");
    aesCipher.init(Cipher.ENCRYPT_MODE, aesKey, new IvParameterSpec(iv));

    FileInputStream inFile = new FileInputStream(inputFile);
    FileOutputStream outFile = new FileOutputStream(outputFile);
    byte[] buffer = new byte[4096];
    int bytesRead;

    while ((bytesRead = inFile.read(buffer)) != -1) {
        byte[] outputBytes = aesCipher.update(buffer, 0, bytesRead);
        outFile.write(outputBytes);
    }

    byte[] outputBytes = aesCipher.doFinal();
    outFile.write(outputBytes);

    inFile.close();
    outFile.close();

    // Encrypt AES key and IV using RSA public key
    FileInputStream publicKeyFileStream = new FileInputStream(publicKeyFile);
    byte[] publicKeyBytes = publicKeyFileStream.readAllBytes();
    publicKeyFileStream.close();
    X509EncodedKeySpec publicKeyCertificate = new X509EncodedKeySpec(publicKeyBytes);
    KeyFactory keyFactory = KeyFactory.getInstance("RSA");
    PublicKey rsaPublicKey = keyFactory.generatePublic(publicKeyCertificate);

    Cipher rsaCipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
    rsaCipher.init(Cipher.ENCRYPT_MODE, rsaPublicKey);

    byte[] encryptedAESKey = rsaCipher.doFinal(aesKey.getEncoded());

    // Write encrypted AES key and IV to file
    FileOutputStream keyOut = new FileOutputStream(outputFile + "_key.dat");
    keyOut.write(encryptedAESKey);
    keyOut.write(iv);

    keyOut.close();
    publicKeyFileStream.close();

    JOptionPane.showMessageDialog(null, "File Encrypted Successfully");
}
    /**
     * Creates new form hybrid_encryption
     */
    public hybrid_encryption() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileLBL = new javax.swing.JLabel();
        selectFileBTN = new javax.swing.JButton();
        encryptBTN = new javax.swing.JButton();
        selectedFileLBL = new javax.swing.JLabel();
        backBTN = new javax.swing.JButton();
        publicKeyLBL = new javax.swing.JLabel();
        publicKeyBTN = new javax.swing.JButton();
        publicKeySelectLBL = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fileLBL.setText("File");

        selectFileBTN.setText("SELECT");
        selectFileBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFileBTNActionPerformed(evt);
            }
        });

        encryptBTN.setText("ENCRYPT");
        encryptBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptBTNActionPerformed(evt);
            }
        });

        selectedFileLBL.setText("No file selected");

        backBTN.setText("BACK");
        backBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBTNActionPerformed(evt);
            }
        });

        publicKeyLBL.setText("Public Key");

        publicKeyBTN.setText("SELECT");
        publicKeyBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                publicKeyBTNActionPerformed(evt);
            }
        });

        publicKeySelectLBL.setText("No file selected");

        jLabel1.setFont(new java.awt.Font("Segoe UI Historic", 1, 18)); // NOI18N
        jLabel1.setText("HYBRID ENCRYPTION");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(backBTN))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(publicKeySelectLBL)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(publicKeyLBL)
                                    .addComponent(fileLBL))
                                .addGap(47, 47, 47)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(selectedFileLBL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(selectFileBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(publicKeyBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(157, 157, 157)
                        .addComponent(encryptBTN))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addComponent(jLabel1)))
                .addContainerGap(155, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel1)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fileLBL)
                        .addGap(42, 42, 42)
                        .addComponent(publicKeyLBL))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(selectFileBTN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectedFileLBL)
                        .addGap(18, 18, 18)
                        .addComponent(publicKeyBTN)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(publicKeySelectLBL)
                .addGap(18, 18, 18)
                .addComponent(encryptBTN)
                .addGap(35, 35, 35)
                .addComponent(backBTN))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void encryptBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptBTNActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Save Encrypted File");

        int userSelection = fileChooser.showSaveDialog(this);

        if(userSelection == JFileChooser.APPROVE_OPTION){
            File toSave = fileChooser.getSelectedFile();
            output = toSave.getAbsolutePath();
            try {
                encrypt_hybrid(input,output,publicKey);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null,ex);
            }
        }else{
            JOptionPane.showMessageDialog(null,"Save cancelled");
        }
    }//GEN-LAST:event_encryptBTNActionPerformed

    private void selectFileBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFileBTNActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        
        int result = fileChooser.showOpenDialog(null);
        
        if(result == JFileChooser.APPROVE_OPTION){
            file = fileChooser.getSelectedFile();
            input = file.getAbsolutePath();
            
            if(file == null){
                JOptionPane.showMessageDialog(null,"No file selected, please select a file!");
            }
            else{
                selectedFileLBL.setText(file.getName());
            }
            
        }
        else if(result == JFileChooser.CANCEL_OPTION){
                    JOptionPane.showMessageDialog(null,"File selection cancelled!");
                    }
        else if(result == JFileChooser.ERROR_OPTION){
            JOptionPane.showMessageDialog(null,"Error selecting file");
            
        }
    }//GEN-LAST:event_selectFileBTNActionPerformed

    private void backBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBTNActionPerformed
        encryption_type et = new encryption_type();
        et.show();
        this.setVisible(false);
    }//GEN-LAST:event_backBTNActionPerformed

    private void publicKeyBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_publicKeyBTNActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        
        int result = fileChooser.showOpenDialog(null);
        
        if(result == JFileChooser.APPROVE_OPTION){
            file = fileChooser.getSelectedFile();
            publicKey = file.getAbsolutePath();
            
            if(file == null){
                JOptionPane.showMessageDialog(null,"No Public Key selected, please select a Public Key!");
            }
            else{
                publicKeySelectLBL.setText(file.getName());
            }
            
        }
        else if(result == JFileChooser.CANCEL_OPTION){
                    JOptionPane.showMessageDialog(null,"Public Key selection cancelled!");
                    }
        else if(result == JFileChooser.ERROR_OPTION){
            JOptionPane.showMessageDialog(null,"Error selecting Public Key");
            
        }
    }//GEN-LAST:event_publicKeyBTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(hybrid_encryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(hybrid_encryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(hybrid_encryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(hybrid_encryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new hybrid_encryption().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBTN;
    private javax.swing.JButton encryptBTN;
    private javax.swing.JLabel fileLBL;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton publicKeyBTN;
    private javax.swing.JLabel publicKeyLBL;
    private javax.swing.JLabel publicKeySelectLBL;
    private javax.swing.JButton selectFileBTN;
    private javax.swing.JLabel selectedFileLBL;
    // End of variables declaration//GEN-END:variables
}
